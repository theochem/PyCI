name: PyPI Release

on:
  push:
    tags:
      # Trigger on version tags (e.g., v1.0.0)
      - "v[0-9].[0-9].[0-9]*"
      - "[0-9].[0-9].[0-9]*"
      # Trigger on pre-release tags (e.g., v1.0.0-alpha.1)
      - "v[0-9].[0-9].[0-9]*-*"
      - "[0-9].[0-9].[0-9]*-*"

env:
  # The name of the package to be published to PyPI and TestPyPI.
  PYPI_NAME: qc-PyCI

jobs:
  build:
    name: Build distribution
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # # Install build dependencies
      # - name: Install build dependencies (Linux)
      #   if: runner.os == 'Linux'
      #   run: sudo apt-get update && sudo apt-get install -y make gcc g++

      # - name: Install build dependencies (macOS)
      #   if: runner.os == 'macOS'
      #   run: brew install make gcc

      # - name: Install build dependencies (Windows)
      #   if: runner.os == 'Windows'
      #   run: choco install make mingw
      - uses: actions/checkout@v4
      - name: Install build dependencies (All)
        run: |
          # TODO: use requirements.txt later
          python -m pip install numpy>=1.13 scipy>=1.0.0
          python -m pip install --upgrade pip setuptools wheel

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        # env:
        #   CIBW_SOME_OPTION: value
        #    ...
        with:
          package-dir: .
          output-dir: dist
          config-file: "{package}/pyproject.toml"

      # Upload built artifacts
      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      # Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # Publish distribution to PyPI
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: dist
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # Publish distribution to TestPyPI
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages_dir: dist
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

  github-release:
    name: Sign the Python distribution with Sigstore and upload them to GitHub Release
    needs: publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      # Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # Sign the dists with Sigstore
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz

      # Create GitHub Release
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create "${{ github.ref_name }}" --repo "${{ github.repository }}" --notes ""

      # Upload artifact signatures to GitHub Release
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release upload "${{ github.ref_name }}" dist/** --repo "${{ github.repository }}"
